/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package com.windea.plugin.idea.stellaris.script.psi;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.*;
import static com.windea.plugin.idea.stellaris.script.psi.StellarisScriptTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>StellarisScriptLexer.flex</tt>
 */
public class StellarisScriptLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VARIABLE_EQUAL_SIGN = 2;
  public static final int WAITING_VARIABLE_VALUE = 4;
  public static final int WAITING_VARIABLE_EOL = 6;
  public static final int WAITING_PROPERTY = 8;
  public static final int WAITING_PROPERTY_KEY = 10;
  public static final int WATIING_PROPERTY_SEPARATOR = 12;
  public static final int WAITING_PROPERTY_VALUE = 14;
  public static final int WAITING_PROPERTY_EOL = 16;
  public static final int WAITING_CODE = 18;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\4\1\3\2\2\1\3\22\0\1\4\1\0\1\13\1\5\4\0\1\14\2\0\1\24\1\0\1\25\1\27"+
    "\1\0\1\23\11\26\2\0\1\11\1\12\1\10\1\0\1\6\32\7\1\41\1\15\1\40\1\0\1\7\1\0"+
    "\1\34\1\33\2\7\1\17\1\7\1\32\1\35\3\7\1\36\1\7\1\21\1\22\2\7\1\31\1\20\2\7"+
    "\1\36\2\7\1\16\1\7\1\37\1\0\1\30\7\0\1\2\32\0\1\1\337\0\1\1\177\0\13\1\35"+
    "\0\2\2\5\0\1\1\57\0\1\1\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\1\1\1\2\2\3\1\4\1\2\2\1\2\2"+
    "\2\1\1\5\1\1\1\5\1\6\2\1\1\7\1\2"+
    "\1\10\1\3\1\11\1\12\1\6\1\7\1\13\1\2"+
    "\2\13\1\14\1\13\1\14\1\15\1\2\1\15\2\2"+
    "\1\16\1\3\1\17\1\20\1\21\2\2\2\1\1\5"+
    "\1\1\1\5\2\1\1\22\2\23\1\16\1\7\1\24"+
    "\1\0\2\25\2\0\1\26\1\0\1\1\3\0\1\25"+
    "\1\27\2\0\1\1\1\30\4\1\2\0\1\31\1\0"+
    "\1\13\1\32\2\13\1\0\1\15\1\0\1\15\1\0"+
    "\1\33\1\34\1\35\1\0\1\27\1\0\1\1\1\30"+
    "\4\1\1\36\2\25\2\0\1\27\2\0\1\25\1\0"+
    "\1\5\2\1\1\14\1\37\1\0\1\5\2\1\2\25"+
    "\5\0\2\40";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\u0198\0\u01ba\0\u01dc\0\u01fe"+
    "\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\u02ca\0\u02ec\0\u030e"+
    "\0\u0330\0\u0352\0\u0374\0\u0396\0\u0352\0\u03b8\0\u03da\0\u03fc"+
    "\0\u041e\0\u0264\0\u0264\0\u0264\0\u0440\0\u0462\0\u0484\0\u04a6"+
    "\0\u04c8\0\u04ea\0\u050c\0\u052e\0\u0550\0\u0572\0\u0594\0\u05b6"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0264\0\u0660\0\u0682\0\u06a4"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u07b4\0\u0264\0\u081a\0\u0220\0\u0264\0\u0352"+
    "\0\u0176\0\u083c\0\u085e\0\u0880\0\u08a2\0\u0286\0\u08c4\0\u08e6"+
    "\0\u0352\0\u0908\0\u092a\0\u094c\0\u0154\0\u02ec\0\u096e\0\u0990"+
    "\0\u09b2\0\u03b8\0\u0462\0\u0264\0\u09d4\0\u09f6\0\u0440\0\u04c8"+
    "\0\u0a18\0\u0550\0\u0550\0\u0a3a\0\u0a5c\0\u05b6\0\u0264\0\u0264"+
    "\0\u0a7e\0\u0682\0\u0264\0\u0aa0\0\u0ac2\0\u0220\0\u06e8\0\u0ae4"+
    "\0\u0b06\0\u0b28\0\u0264\0\u0880\0\u0242\0\u0b4a\0\u08e6\0\u081a"+
    "\0\u0b6c\0\u0b8e\0\u0682\0\u0bb0\0\u096e\0\u0bd2\0\u0bf4\0\u0a18"+
    "\0\u0264\0\u0c16\0\u0ae4\0\u0c38\0\u0c5a\0\u0b4a\0\u08a2\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0352\0\u0264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\2\15\1\16\1\17\1\20\1\13\1\21"+
    "\1\22\1\23\1\24\2\13\1\25\2\13\1\26\1\13"+
    "\1\27\2\30\1\31\1\13\1\32\1\33\3\13\1\34"+
    "\1\13\1\35\2\13\1\23\1\36\2\37\1\40\1\41"+
    "\4\23\1\42\15\23\1\43\6\23\1\44\2\23\1\45"+
    "\1\36\2\37\1\40\1\41\1\23\3\45\1\23\1\46"+
    "\2\45\1\47\2\45\1\50\1\45\1\51\2\52\1\53"+
    "\1\45\1\43\6\45\1\44\2\45\1\23\1\36\2\37"+
    "\1\40\1\41\22\23\1\43\6\23\1\44\2\23\1\54"+
    "\6\23\1\54\1\23\1\55\1\23\1\56\26\54\1\13"+
    "\1\14\2\15\1\16\1\17\1\57\1\13\1\21\1\22"+
    "\1\23\1\24\2\13\1\25\2\13\1\26\1\13\1\27"+
    "\2\30\1\31\1\13\1\32\1\33\3\13\1\34\1\13"+
    "\1\35\2\13\1\23\1\60\2\61\1\62\1\41\2\23"+
    "\1\63\1\64\1\65\15\23\1\43\6\23\1\44\2\23"+
    "\1\21\1\60\2\61\1\62\1\41\1\66\3\21\1\23"+
    "\1\67\2\21\1\70\2\21\1\71\1\21\1\72\2\73"+
    "\1\74\1\21\1\43\1\75\3\21\1\76\1\21\1\44"+
    "\2\21\1\23\1\60\2\61\1\77\1\41\22\23\1\43"+
    "\6\23\1\44\2\23\1\100\1\101\1\102\1\61\1\101"+
    "\23\100\1\43\6\100\1\103\1\104\1\100\1\13\4\105"+
    "\3\13\2\106\1\107\1\110\14\13\1\110\6\13\1\110"+
    "\2\13\1\0\1\111\2\15\1\111\36\0\4\15\36\0"+
    "\1\111\2\15\1\16\35\0\3\17\1\0\36\17\7\0"+
    "\1\112\5\0\1\113\6\112\1\0\2\112\2\0\6\112"+
    "\3\0\1\21\4\0\5\21\2\0\14\21\1\0\6\21"+
    "\1\0\2\21\1\22\4\0\3\22\1\114\1\22\1\0"+
    "\1\115\14\22\1\115\6\22\1\115\2\22\42\0\1\116"+
    "\2\117\1\105\1\117\3\116\3\120\1\121\1\122\1\123"+
    "\24\116\1\13\4\105\3\13\2\106\1\107\1\110\3\13"+
    "\1\124\10\13\1\110\6\13\1\110\3\13\4\105\3\13"+
    "\2\106\1\107\1\110\6\13\1\125\5\13\1\110\6\13"+
    "\1\110\3\13\4\105\3\13\2\106\1\107\1\110\7\13"+
    "\1\126\2\13\1\126\1\127\1\110\6\13\1\110\3\13"+
    "\4\105\3\13\2\106\1\107\1\110\7\13\1\126\2\13"+
    "\1\31\1\13\1\110\6\13\1\110\3\13\4\105\3\13"+
    "\2\106\1\107\1\110\7\13\1\31\2\13\1\31\1\127"+
    "\1\110\6\13\1\110\2\13\1\110\4\105\3\110\3\107"+
    "\27\110\1\13\4\105\3\13\2\106\1\107\1\110\14\13"+
    "\1\110\1\13\1\130\4\13\1\110\3\13\4\105\3\13"+
    "\2\106\1\107\1\110\4\13\1\131\7\13\1\110\6\13"+
    "\1\110\2\13\1\0\1\132\2\37\1\132\36\0\4\37"+
    "\36\0\1\132\2\37\1\40\35\0\3\41\1\0\36\41"+
    "\1\45\4\0\5\45\2\0\14\45\1\0\6\45\1\0"+
    "\2\45\3\133\1\0\7\133\1\134\1\133\1\135\24\133"+
    "\1\45\4\0\5\45\2\0\3\45\1\136\10\45\1\0"+
    "\6\45\1\0\3\45\4\0\5\45\2\0\6\45\1\137"+
    "\5\45\1\0\6\45\1\0\3\45\4\0\5\45\2\0"+
    "\7\45\1\140\2\45\1\140\1\141\1\0\6\45\1\0"+
    "\3\45\4\0\5\45\2\0\7\45\1\140\2\45\1\53"+
    "\1\45\1\0\6\45\1\0\3\45\4\0\5\45\2\0"+
    "\7\45\1\53\2\45\1\53\1\141\1\0\6\45\1\0"+
    "\2\45\1\54\4\0\3\54\3\0\27\54\1\142\4\0"+
    "\3\142\1\143\1\142\1\0\27\142\1\56\2\144\1\0"+
    "\1\144\3\56\3\144\2\54\1\145\24\56\15\0\1\113"+
    "\25\0\1\146\2\61\1\146\36\0\4\61\36\0\1\146"+
    "\2\61\1\62\47\0\1\147\41\0\1\150\36\0\1\151"+
    "\5\0\1\113\6\151\1\0\2\151\2\0\6\151\3\0"+
    "\3\152\1\0\7\152\1\153\1\152\1\154\24\152\1\21"+
    "\4\0\5\21\2\0\3\21\1\155\10\21\1\0\6\21"+
    "\1\0\3\21\4\0\5\21\2\0\6\21\1\156\5\21"+
    "\1\0\6\21\1\0\3\21\4\0\5\21\2\0\7\21"+
    "\1\157\2\21\1\157\1\160\1\0\6\21\1\0\3\21"+
    "\4\0\5\21\2\0\7\21\1\157\2\21\1\74\1\21"+
    "\1\0\6\21\1\0\3\21\4\0\5\21\2\0\7\21"+
    "\1\74\2\21\1\74\1\160\1\0\6\21\1\0\3\21"+
    "\4\0\5\21\2\0\14\21\1\0\1\21\1\161\4\21"+
    "\1\0\3\21\4\0\5\21\2\0\4\21\1\162\7\21"+
    "\1\0\6\21\1\0\2\21\1\0\1\146\2\61\1\77"+
    "\35\0\3\100\1\0\24\100\1\0\7\100\1\0\2\100"+
    "\1\101\1\102\1\61\1\101\23\100\1\0\7\100\1\0"+
    "\2\100\2\102\1\61\1\102\23\100\1\0\7\100\1\0"+
    "\1\100\1\0\4\105\3\0\3\107\36\0\1\112\6\0"+
    "\6\112\1\0\2\112\2\0\6\112\44\0\1\163\1\22"+
    "\4\105\3\22\1\164\1\165\1\107\1\115\14\22\1\115"+
    "\6\22\1\115\2\22\1\115\4\0\3\115\1\166\1\115"+
    "\1\0\27\115\1\167\2\117\1\105\1\117\3\167\3\120"+
    "\1\170\1\152\1\171\27\167\1\0\7\167\1\170\1\152"+
    "\1\171\24\167\1\122\2\172\1\105\1\172\3\122\3\173"+
    "\1\121\1\122\1\174\24\122\1\116\1\117\2\105\1\117"+
    "\3\116\3\120\27\116\1\13\4\105\3\13\2\106\1\107"+
    "\1\110\4\13\1\125\7\13\1\110\6\13\1\110\3\13"+
    "\4\105\3\13\2\106\1\107\1\110\7\13\1\175\2\13"+
    "\1\175\1\13\1\110\6\13\1\110\3\13\4\105\3\13"+
    "\2\106\1\107\1\110\14\13\1\110\2\13\1\176\3\13"+
    "\1\110\3\13\4\105\3\13\2\106\1\107\1\110\14\13"+
    "\1\110\2\13\1\177\2\13\1\177\1\110\2\13\2\133"+
    "\2\0\36\133\1\45\4\0\5\45\2\0\4\45\1\137"+
    "\7\45\1\0\6\45\1\0\3\45\4\0\5\45\2\0"+
    "\7\45\1\200\2\45\1\200\1\45\1\0\6\45\1\0"+
    "\2\45\3\144\1\0\7\144\1\201\1\0\1\202\24\144"+
    "\1\56\1\144\2\0\1\144\3\56\3\144\27\56\7\0"+
    "\1\151\6\0\6\151\1\0\2\151\2\0\6\151\3\0"+
    "\2\152\2\0\36\152\1\21\4\0\5\21\2\0\4\21"+
    "\1\156\7\21\1\0\6\21\1\0\3\21\4\0\5\21"+
    "\2\0\7\21\1\203\2\21\1\203\1\21\1\0\6\21"+
    "\1\0\3\21\4\0\5\21\2\0\14\21\1\0\2\21"+
    "\1\204\3\21\1\0\3\21\4\0\5\21\2\0\14\21"+
    "\1\0\2\21\1\205\2\21\1\205\1\0\2\21\1\115"+
    "\4\105\3\115\1\206\1\207\1\107\27\115\2\167\2\0"+
    "\36\167\1\152\2\172\1\105\1\172\3\152\3\173\1\153"+
    "\1\152\1\154\24\152\1\122\1\172\2\105\1\172\3\122"+
    "\3\173\27\122\1\13\3\105\1\210\3\13\2\106\1\107"+
    "\1\110\14\13\1\110\3\13\1\177\2\13\1\211\3\13"+
    "\3\105\1\210\3\13\2\106\1\107\1\110\14\13\1\110"+
    "\6\13\1\211\2\13\2\144\2\0\36\144\1\21\3\0"+
    "\1\212\5\21\2\0\14\21\1\0\3\21\1\205\2\21"+
    "\1\213\3\21\3\0\1\212\5\21\2\0\14\21\1\0"+
    "\6\21\1\213\2\21\1\0\3\105\1\210\3\0\3\107"+
    "\24\0\1\213\2\0\1\110\3\105\1\214\3\110\3\107"+
    "\10\110\1\211\2\110\2\211\1\215\11\110\4\0\1\212"+
    "\32\0\1\213\6\0\1\213\16\0\1\213\2\0\2\213"+
    "\1\216\12\0\3\105\1\214\3\0\3\107\10\0\1\213"+
    "\2\0\2\213\1\216\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3366];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\10\1\1\11\16\1\3\11\20\1\1\11\16\1"+
    "\1\11\1\0\1\1\1\11\2\0\1\1\1\0\1\1"+
    "\3\0\2\1\2\0\6\1\2\0\1\11\1\0\4\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\11\1\1\1\0"+
    "\1\11\1\0\6\1\1\11\2\1\2\0\1\1\2\0"+
    "\1\1\1\0\4\1\1\11\1\0\5\1\5\0\1\1"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  int depth = 0;

  public int nextState(){
	  return depth <= 0 ? YYINITIAL : WAITING_PROPERTY_KEY;
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StellarisScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(WAITING_PROPERTY_EOL); return STRING_TOKEN;
            } 
            // fall through
          case 33: break;
          case 2: 
            { return BAD_CHARACTER;
            } 
            // fall through
          case 34: break;
          case 3: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 35: break;
          case 4: 
            { return COMMENT;
            } 
            // fall through
          case 36: break;
          case 5: 
            { yybegin(WAITING_PROPERTY_EOL); return NUMBER_TOKEN;
            } 
            // fall through
          case 37: break;
          case 6: 
            { depth--;  yybegin(nextState()); return RIGHT_BRACE;
            } 
            // fall through
          case 38: break;
          case 7: 
            { depth++;  yybegin(nextState()); return LEFT_BRACE;
            } 
            // fall through
          case 39: break;
          case 8: 
            { yybegin(YYINITIAL); return WHITE_SPACE;
            } 
            // fall through
          case 40: break;
          case 9: 
            { return END_OF_LINE_COMMENT;
            } 
            // fall through
          case 41: break;
          case 10: 
            { yybegin(WAITING_VARIABLE_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 42: break;
          case 11: 
            { yybegin(WAITING_VARIABLE_EOL); return STRING_TOKEN;
            } 
            // fall through
          case 43: break;
          case 12: 
            { yybegin(WAITING_VARIABLE_EOL); return NUMBER_TOKEN;
            } 
            // fall through
          case 44: break;
          case 13: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); return PROPERTY_KEY_ID;
            } 
            // fall through
          case 45: break;
          case 14: 
            { yybegin(nextState()); return WHITE_SPACE;
            } 
            // fall through
          case 46: break;
          case 15: 
            { yybegin(WAITING_PROPERTY_VALUE); return GT_SIGN;
            } 
            // fall through
          case 47: break;
          case 16: 
            { yybegin(WAITING_PROPERTY_VALUE); return LT_SIGN;
            } 
            // fall through
          case 48: break;
          case 17: 
            { yybegin(WAITING_PROPERTY_VALUE); return EQUAL_SIGN;
            } 
            // fall through
          case 49: break;
          case 18: 
            { yybegin(WAITING_PROPERTY_KEY); return WHITE_SPACE;
            } 
            // fall through
          case 50: break;
          case 19: 
            { return CODE_TEXT_TOKEN;
            } 
            // fall through
          case 51: break;
          case 20: 
            { yybegin(WAITING_PROPERTY_EOL); return CODE_END;
            } 
            // fall through
          case 52: break;
          case 21: 
            { yypushback(yylength()); yybegin(WAITING_PROPERTY);
            } 
            // fall through
          case 53: break;
          case 22: 
            { yybegin(WAITING_VARIABLE_EQUAL_SIGN); return VARIABLE_NAME_ID;
            } 
            // fall through
          case 54: break;
          case 23: 
            { yybegin(WAITING_PROPERTY_EOL); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 55: break;
          case 24: 
            { yybegin(WAITING_PROPERTY_EOL); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 56: break;
          case 25: 
            { yybegin(WAITING_VARIABLE_EOL); return QUOTED_STRING_TOKEN;
            } 
            // fall through
          case 57: break;
          case 26: 
            { yybegin(WAITING_VARIABLE_EOL); return BOOLEAN_TOKEN;
            } 
            // fall through
          case 58: break;
          case 27: 
            { yybegin(WAITING_PROPERTY_VALUE); return GE_SIGN;
            } 
            // fall through
          case 59: break;
          case 28: 
            { yybegin(WAITING_PROPERTY_VALUE); return LE_SIGN;
            } 
            // fall through
          case 60: break;
          case 29: 
            { yybegin(WAITING_PROPERTY_EOL); return VARIABLE_REFERENCE_ID;
            } 
            // fall through
          case 61: break;
          case 30: 
            { yybegin(WAITING_CODE); return CODE_START;
            } 
            // fall through
          case 62: break;
          case 31: 
            { yybegin(WATIING_PROPERTY_SEPARATOR); return QUOTED_PROPERTY_KEY_ID;
            } 
            // fall through
          case 63: break;
          case 32: 
            { yybegin(WAITING_PROPERTY_EOL); return COLOR_TOKEN;
            } 
            // fall through
          case 64: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
