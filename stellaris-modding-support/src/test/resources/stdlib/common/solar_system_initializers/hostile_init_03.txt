hostile_init_03 = {
	class = "rl_standard_stars"
	
	usage = misc_system_init
	usage_odds = {
		base = 0
		#modifier = {
		#	factor = 0
		#	NOT = { is_in_cluster = resource_cluster_1 }
		#}
		modifier = {
            factor = 0
            has_star_flag = empire_cluster
        }
        modifier = {
			factor = 0
			is_bottleneck_system = yes
		}
	}

	max_instances = 1

	flags = { hostile_system green_system }

	planet = {
		count = 1
		class = star
		orbit_distance = 0
		orbit_angle = 1
		size = { min = 20 max = 30 }
		has_ring = no
	}
	
	change_orbit = 45
	
	planet = {
		count = { min = 3 max = 10 }
		orbit_distance = 20
		orbit_angle = { min = 90 max = 270 }
		
		change_orbit = @base_moon_distance
		
		moon = {
			count = { min = 0 max = 1 }
			orbit_angle = { min = 90 max = 270 }
			orbit_distance = 5
		}
	}
	
	init_effect = {
		create_crystal_country = yes
		random_system_planet = {
			limit = {
				is_star = no
				is_moon = no
			}
			save_event_target_as = green_trigger_1
		}
		random_system_planet = {
			limit = {
				is_star = no
				is_moon = no
				NOT = {
					is_same_value = event_target:green_trigger_1
				}
			}
			save_event_target_as = green_trigger_2
		}
		random_system_planet = {
			limit = {
				is_star = no
				is_moon = no
				NOT = {
					is_same_value = event_target:green_trigger_1
					is_same_value = event_target:green_trigger_2
				}
			}
			save_event_target_as = green_trigger_3
		}
		event_target:crystal_country = {
			create_fleet = {
				name = "NAME_Emerald_Roamers"
				effect = {
					set_owner = event_target:crystal_country
					create_ship = {
						name = ""
						design = "NAME_Large_Crystal_Entity_Green"
					}
					while = {
						count = 2
						create_ship = {
							name = ""
							design = "NAME_Medium_Crystal_Entity_Green"
						}
					}
					while = {
						count = 8
						create_ship = {
							name = ""
							design = "NAME_Small_Crystal_Entity_Green"
						}
					}
					set_location = event_target:green_trigger_3
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_aggro_range = 100
					queue_actions = {
						repeat = {
							find_closest_planet = {
								trigger = {
									id = "greenC.1.trigger.1"
									is_planet = event_target:green_trigger_1
								}
								found_planet = {
									move_to = this
									orbit_planet = THIS
								}
							}
							find_closest_planet = {
								trigger = {
									id = "greenC.1.trigger.2"
									is_planet = event_target:green_trigger_2
								}
								found_planet = {
									move_to = this
									orbit_planet = THIS
								}
							}
							find_closest_planet = {
								trigger = {
									id = "greenC.1.trigger.3"
									is_planet = event_target:green_trigger_3
								}
								found_planet = {
									move_to = this
									orbit_planet = THIS
								}
							}
						}
					}
				}
			}
		}
	}
}
