# $xxx 表示一个占位符，名字理论上可以是任意的
# 类型定义
types:
  weight_modifier:
    weight: number
    modifier[]: modifier
  modifier:
    # region oneOf
    factor: number
    add: number
    condition[]: ""
    #endregion
  condition:
    # region anyOf
    exists: any
    from: trigger[]
    owner[]: trigger[]
    # ...
    # endregion
  trigger#:
    # region anyOf
    trigger_expression: ""
    always: boolean
    any_xxx: xxx
    has_xxx: xxx
    NOT: {}
    OR: {}
    NOR: {}
    AND: {}
    # endregion
  resources:
    category: armies
    cost: cost
    upkeep: upkeep
  cost/upkeep:
    # region anyOf
    minerals: int
    # endregion
    energy: int

# 文件结构
common:
  # 议程
  agendas:
    $agenda[]:
      weight_modifier: weight_modifier
      modifier[]: modifier
  # 支出
  ai_budget:
    $ai_budget[]:
      resource: resource
      type: any
      category: any
      poential: condition
      fraction: weight_modifier
      static_min:
        base: int
        modifier: modifier
      static_max:
        base: int
        modifier: modifier
  # 背景对象
  ambient_objects:
    $ambient_object[]:
      name: string | localization_property
      entity: string | localization_property
      selectable: boolean
      show_name: boolean
      description?: string | localization_property
      tooltip?: string | localization_property
  # 异常
  anomalies:
    $anomaly[]:
      # Allows AI empires to generate the category. Default: no
      should_ai_use: boolean = no
      # If yes, both AI and human empires can use this anomaly (overrides should_ai_use)
      should_ai_and_humans_use?: boolean = no
      # region oneOf
      # Optional, if no desc is given "<category key>_desc" is assumed
      desc: string | localization_property = $cagetory_key$_desc
      desc#:
        # Scope: planet, from = ship
        trigger[]: trigger
        # Localization key for description
        text: string | localization_property = $cagetory_key$_desc
      # endregion
      # Picture displayed in category window
      picture: gfx_reference
      # Anomaly level, 1 to 10
      level: int(1,10)
      # Default 0. 0.0 - 1.0 (0 to 100%) chance category will NOT spawn
      # even if it is picked by the anomaly die roll. Used to make
      null_spawn_chance: number(0.0,1.0) = 0
      # categories for unusual objects (e.g. black holes) actually rare.
      # default NO, if true will spawn category only once per empire
      max_once?: boolean = no
      # default NO, if true will spawn category only once per game
      max_once_global?: boolean = no
      # Chance for this anomaly category to spawn,
      spawn_chance:
        # relative to other valid categories. Default: base = 0
        base: number = 0
        # Spawn chance modifier
        modifier[]: modifier
      # Executes immediately when anomaly category is spawned.
      # Scopes are this/root: planet, from: ship
      # NOTE: on_spawn effects will not run if category is spawned through console
      on_spawn?: typeof on_success # effect[] ???
      # region anyOf
      on_success: event_id
      on_success#:
        # region anyOf
        $number[]: event_id
        $number[]#:
          max_once?: boolean = yes
          max_once_global: no
          modifier[]: modfifier
          anomaly_event: event_id
        # endregion
      # endregion
  # 考古站点
  archaeological_site_types:
    $site_type[]:
      # region oneOf
      # Optional, if no desc is given "<category key>_desc" is assumed
      desc: string | localization_property = $cagetory_key$_desc
      desc#:
        # Scope: planet, from = ship
        trigger[]: trigger
        # Localization key for description
        text: string | localization_property = $cagetory_key$_desc
      # endregion
      picture: gfx_reference
      # # Should match number of defined stages below.
      stages: int
      # Max instances of this type a galaxy can have, only checked when using `create_archaeological_site = random`
      max_instance: int
      # Weight used for random weight, only used when using `create_archaeological_site = random`. scriptable value type is defined either by '<int>' or `<mean time to happen>`.
      weight: weight_modifier
      # Trigger checking if a scope with this=fleet ,prev=archaeological site is potential to excavate (this will add/remove this option without giving the player a reason).
      potential: condition
      # Trigger checking if a scope with this=fleet ,prev=archaeological site is allowed to excavate (this will toggle enable/disabled mode on buttons etc).
      allow: trigger
      visible: trigger
      on_visible: event
      # Stage definition, order dependent.
      # region anyOf
      stage:
        # min max interval type. interval is defined either by '<int>' or '{ min = <int> max=<int> }' where the later will randomize a value between min and max.
        difficulty: int
        # rune icon gfx type.
        icon: gfx_reference
        # # event to fire when finished the state.
        event: event_id
      # endregion
      # effect to fire when a roll fails
      on_roll_failed: effect
  # 军队
  armies:
    $army[]:
      damage: number
      health: number
      morale: number
      morale_damage: number
      collateral_damage: number
      war_exhaustion: number # 战争之殇
      has_morale: boolean = yes
      has_species: boolean = yes
      time: int
      icon_frame: int
      pop_limited?: boolean = yes
      prerequisites: tech[]
      resources: resources
      show_tech_unlock_if: trigger
      allow: trigger
  #遗物动作
  artifact_actions:
    resources: resources
    ai_weight: weight_modifier
    potential: trigger
    allow:
      custom_tooltip:
        fail_text: string | localization_property
        trigger[]: ""
        always: boolean
    effect:
      custom_tooltip: string | localization_property
      generate_lcluster_clue: boolean
      hidden_effect:
        if:
          limit: trigget
        add_modifier:
          modifier: modifier_name
          owner:
            country_event: event_id
          days: int
      add_monthly_resource_mult:
        resource: resource
        value: int
        min: int
        max: int

  ascension_perks: {}
  asteroid_belts: {}
  attributes: {}
  bombardment_stances: {}
  buildings: {}
  button_effects: {}
  bypass: {}
  casus_belli: {}
  colony_automation: {}
  colony_automation_exceptions: {}
  colony_types: {}
  colors: {}
  component_sets: {}
  component_slot_templates: {}
  component_tags: {}
  component_templates: {}
  country_customization: {}
  country_types: {}
  decisions: {}
  defines: {}
  deposit_categories: {}
  deposits: {}
  diplo_phrases: {}
  diplomacy_economy: {}
  districts: {}
  dynamic_text: {}
  economic_categories: {}
  economic_plants: {}
  edicts: {}
  event_chains: {}
  fall_empires: {}
  federation_law_categories: {}
  federation_laws: {}
  federation_perks: {}
  federation_types: {}
  galactic_focuses: {}
  game_rules: {}
  global_ship_designs: {}
  governments: {}
  graphical_culture: {}
  lawsuits: {}
  leader_classes: {}
  mandates: {}
  map_modes: {}
  megastructures: {}
  name_lists: {}
  notification_modifiers: {}
  observation_station_missions: {}
  on_actions: {}
  opinion_modifiers: {}
  persionalities: {}
  planet_classes: {}
  planet_modifiers: {}
  policies: {}
  pop_categories: {}
  pop_faction_types: {}
  pop_jobs: {}
  percursor_civilizations: {}
  random_names: {}
  relics: {}
  resolution_categories: {}
  resolutions: {}
  scripted_effects: {}
  scripted_loc: {}
  scripted_triggers: {}
  scripted_variables: {}
  section_templates: {}
  sector_focuses: {}
  sector_types: {}
  ship_behaviors: {}
  ship_sizes: {}
  solar_system_initializers: {}
  special_projects: {}
  species_classes: {}
  species_names: {}
  species_rights: {}
  star_classes: {}
  starbase_buildings: {}
  starbase_levels: {}
  starbase_modules: {}
  starbase_types: {}
  start_screen_messages: {}
  static_modifiers: {}
  strategic_resources: {}
  subjects: {}
  system_types: {}
  technology: {}
  terraform: {}
  trade_conversions: {}
  tradition_categories: {}
  traditions: {}
  traits: {}
  war_goals: {}






